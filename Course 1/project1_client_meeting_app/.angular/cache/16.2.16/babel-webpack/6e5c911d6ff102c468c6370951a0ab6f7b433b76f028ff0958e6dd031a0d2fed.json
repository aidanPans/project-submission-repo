{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass DataService {\n  constructor() {\n    // need an array of clients, meetings, and logins\n    // need two methods per array: one getter and one adder\n    this.logins = [\n      // {\"emailid\":\"aidan.potts@icloud.com\", \"password\":\"aidan123\"},\n      // {\"emailid\":\"admin@gmail.com\", \"password\":\"admin123\"}\n    ];\n    this.clients = [];\n    this.meetings = [];\n  } // DI for service class\n  addClient(client_data) {\n    console.log(\"service layer called\");\n    this.clients.push(client_data);\n    console.log(client_data);\n    console.log(this.clients);\n  }\n  getAllClient() {\n    // TODO\n    return this.clients;\n  }\n  addMeeting(meeting_data) {\n    this.meetings.push(meeting_data);\n  }\n  getAllMeetingInfo() {\n    //TODO\n    return this.meetings;\n  }\n  addLogin(login_data) {\n    this.logins.push(login_data);\n    console.log(login_data);\n    console.log(this.logins);\n  }\n  getAllLogins() {\n    return this.logins;\n  }\n  checkLoginDetails(login_data) {\n    console.log(login_data);\n    console.log(this.logins);\n    let user_type = \"\";\n    let result = this.logins.find(l => l.emailid == login_data.emailid && l.password == login_data.password);\n    console.log(result);\n    if (result == undefined) {\n      if (login_data.emailid == \"admin@gmail.com\" && login_data.password == \"admin123\") {\n        user_type = \"admin\";\n      }\n    } else {\n      user_type = \"client\";\n    }\n    // for (let i = 0; i < this.logins.length; i++) {\n    //   if (this.logins[i] == login_data) {\n    //     if (login_data.emailid == \"admin@gmail.com\" && login_data.password == \"admin123\") {\n    //       user_type = \"admin\";\n    //     }\n    //     else {\n    //       user_type = \"client\";\n    //     }\n    //   }\n    //   else {\n    //     user_type = \"DNE\";\n    //   }\n    // }\n    return user_type;\n  }\n  static {\n    this.ɵfac = function DataService_Factory(t) {\n      return new (t || DataService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DataService,\n      factory: DataService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { DataService };","map":{"version":3,"names":["DataService","constructor","logins","clients","meetings","addClient","client_data","console","log","push","getAllClient","addMeeting","meeting_data","getAllMeetingInfo","addLogin","login_data","getAllLogins","checkLoginDetails","user_type","result","find","l","emailid","password","undefined","factory","ɵfac","providedIn"],"sources":["/Users/aidan/Desktop/CalTech Bootcamp/project1_client_meeting_app/src/app/service/data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  // need an array of clients, meetings, and logins\n  // need two methods per array: one getter and one adder\n\n  logins:Array<any> = [\n    // {\"emailid\":\"aidan.potts@icloud.com\", \"password\":\"aidan123\"},\n    // {\"emailid\":\"admin@gmail.com\", \"password\":\"admin123\"}\n  ];\n\n  clients:Array<any> = [];\n\n  meetings:Array<any> = [];\n\n  constructor() { } // DI for service class\n\n  addClient(client_data:any): void {\n    console.log(\"service layer called\");\n    this.clients.push(client_data);\n    console.log(client_data);\n    console.log(this.clients);\n  }\n\n  getAllClient():Array<any> {\n    // TODO\n    return this.clients;\n  }\n\n  addMeeting(meeting_data:any): void {\n    this.meetings.push(meeting_data);\n  }\n\n  getAllMeetingInfo(): Array<any> {\n    //TODO\n    return this.meetings;\n  }\n\n  addLogin(login_data:any): void {\n    this.logins.push(login_data);\n    console.log(login_data);\n    console.log(this.logins);\n  }\n\n  getAllLogins(): Array<any> {\n    return this.logins;\n  }\n\n  checkLoginDetails(login_data:any): string {\n    console.log(login_data);\n    console.log(this.logins);\n    let user_type = \"\";\n    let result = this.logins.find(l => l.emailid == login_data.emailid && l.password == login_data.password);\n    console.log(result);\n    \n    if (result == undefined) {\n      if (login_data.emailid == \"admin@gmail.com\" && login_data.password == \"admin123\") {\n        user_type = \"admin\";\n      }\n    }\n    else {\n      user_type = \"client\";\n    }\n    // for (let i = 0; i < this.logins.length; i++) {\n    //   if (this.logins[i] == login_data) {\n    //     if (login_data.emailid == \"admin@gmail.com\" && login_data.password == \"admin123\") {\n    //       user_type = \"admin\";\n    //     }\n    //     else {\n    //       user_type = \"client\";\n    //     }\n    //   }\n    //   else {\n    //     user_type = \"DNE\";\n    //   }\n    // }\n\n    return user_type;\n  }\n\n}\n"],"mappings":";AAEA,MAGaA,WAAW;EActBC,YAAA;IAZA;IACA;IAEA,KAAAC,MAAM,GAAc;MAClB;MACA;IAAA,CACD;IAED,KAAAC,OAAO,GAAc,EAAE;IAEvB,KAAAC,QAAQ,GAAc,EAAE;EAER,CAAC,CAAC;EAElBC,SAASA,CAACC,WAAe;IACvBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,IAAI,CAACL,OAAO,CAACM,IAAI,CAACH,WAAW,CAAC;IAC9BC,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;IACxBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,OAAO,CAAC;EAC3B;EAEAO,YAAYA,CAAA;IACV;IACA,OAAO,IAAI,CAACP,OAAO;EACrB;EAEAQ,UAAUA,CAACC,YAAgB;IACzB,IAAI,CAACR,QAAQ,CAACK,IAAI,CAACG,YAAY,CAAC;EAClC;EAEAC,iBAAiBA,CAAA;IACf;IACA,OAAO,IAAI,CAACT,QAAQ;EACtB;EAEAU,QAAQA,CAACC,UAAc;IACrB,IAAI,CAACb,MAAM,CAACO,IAAI,CAACM,UAAU,CAAC;IAC5BR,OAAO,CAACC,GAAG,CAACO,UAAU,CAAC;IACvBR,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,MAAM,CAAC;EAC1B;EAEAc,YAAYA,CAAA;IACV,OAAO,IAAI,CAACd,MAAM;EACpB;EAEAe,iBAAiBA,CAACF,UAAc;IAC9BR,OAAO,CAACC,GAAG,CAACO,UAAU,CAAC;IACvBR,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,MAAM,CAAC;IACxB,IAAIgB,SAAS,GAAG,EAAE;IAClB,IAAIC,MAAM,GAAG,IAAI,CAACjB,MAAM,CAACkB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,IAAIP,UAAU,CAACO,OAAO,IAAID,CAAC,CAACE,QAAQ,IAAIR,UAAU,CAACQ,QAAQ,CAAC;IACxGhB,OAAO,CAACC,GAAG,CAACW,MAAM,CAAC;IAEnB,IAAIA,MAAM,IAAIK,SAAS,EAAE;MACvB,IAAIT,UAAU,CAACO,OAAO,IAAI,iBAAiB,IAAIP,UAAU,CAACQ,QAAQ,IAAI,UAAU,EAAE;QAChFL,SAAS,GAAG,OAAO;;KAEtB,MACI;MACHA,SAAS,GAAG,QAAQ;;IAEtB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,OAAOA,SAAS;EAClB;;;uBA7EWlB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;SAEP3B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}