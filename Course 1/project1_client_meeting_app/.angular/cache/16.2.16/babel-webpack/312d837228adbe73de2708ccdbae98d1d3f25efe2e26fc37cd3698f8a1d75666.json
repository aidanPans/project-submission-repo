{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nlet ClientComponent = class ClientComponent {\n  constructor(ds, router) {\n    this.ds = ds;\n    this.router = router;\n    this.clientRef = new FormGroup({\n      cli_name: new FormControl(),\n      cli_emailid: new FormControl(),\n      cli_address: new FormControl(),\n      password: new FormControl(),\n      RePassword: new FormControl()\n    });\n    this.loginRef = new FormGroup({\n      cli_emailid: new FormControl(),\n      password: new FormControl()\n    });\n  }\n  addClient() {\n    // creating new client and login variables with data\n    let new_client = this.clientRef.value;\n    if (new_client.password != new_client.RePassword) {\n      alert(\"Passwords do not match, please try again\");\n      this.loginRef.reset();\n    } else {\n      let new_login = this.loginRef.value;\n      // adding the new client and login data using the service adder functions in data.service.ts file\n      this.ds.addClient(new_client);\n      this.ds.addLogin(new_login);\n    }\n    // reset and route user to login page\n    this.loginRef.reset();\n    this.clientRef.reset();\n    this.router.navigate([\"/login\"], {\n      skipLocationChange: true\n    });\n  }\n};\nClientComponent = __decorate([Component({\n  selector: 'app-client',\n  templateUrl: './client.component.html',\n  styleUrls: ['./client.component.css']\n})], ClientComponent);\nexport { ClientComponent };","map":{"version":3,"names":["Component","FormControl","FormGroup","ClientComponent","constructor","ds","router","clientRef","cli_name","cli_emailid","cli_address","password","RePassword","loginRef","addClient","new_client","value","alert","reset","new_login","addLogin","navigate","skipLocationChange","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/aidan/Desktop/CalTech Bootcamp/project1_client_meeting_app/src/app/client/client.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { DataService } from '../service/data.service';\nimport { LoginService } from '../login.service';\n\n@Component({\n  selector: 'app-client',\n  templateUrl: './client.component.html',\n  styleUrls: ['./client.component.css']\n})\nexport class ClientComponent {\n\n  clientRef = new FormGroup({\n    cli_name:new FormControl(),\n    cli_emailid:new FormControl(),\n    cli_address:new FormControl(),\n    password:new FormControl(),\n    RePassword:new FormControl()\n  });\n\n  loginRef = new FormGroup({\n    cli_emailid:new FormControl(),\n    password: new FormControl()\n  });\n\n  constructor(public ds:DataService, public router:R) { // DI for Login Service\n  }\n\n  addClient(): void {\n    // creating new client and login variables with data\n    let new_client = this.clientRef.value;\n    if (new_client.password != new_client.RePassword) {\n      alert(\"Passwords do not match, please try again\");\n      this.loginRef.reset();\n    }\n    else {\n      let new_login = this.loginRef.value;\n\n      // adding the new client and login data using the service adder functions in data.service.ts file\n      this.ds.addClient(new_client);    \n      this.ds.addLogin(new_login);\n    }\n\n    // reset and route user to login page\n    this.loginRef.reset();\n    this.clientRef.reset();\n    this.router.navigate([\"/login\"], {skipLocationChange:true});\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,WAAW,EAAEC,SAAS,QAAQ,gBAAgB;AAUvD,IAAaC,eAAe,GAA5B,MAAaA,eAAe;EAe1BC,YAAmBC,EAAc,EAASC,MAAQ;IAA/B,KAAAD,EAAE,GAAFA,EAAE;IAAqB,KAAAC,MAAM,GAANA,MAAM;IAbhD,KAAAC,SAAS,GAAG,IAAIL,SAAS,CAAC;MACxBM,QAAQ,EAAC,IAAIP,WAAW,EAAE;MAC1BQ,WAAW,EAAC,IAAIR,WAAW,EAAE;MAC7BS,WAAW,EAAC,IAAIT,WAAW,EAAE;MAC7BU,QAAQ,EAAC,IAAIV,WAAW,EAAE;MAC1BW,UAAU,EAAC,IAAIX,WAAW;KAC3B,CAAC;IAEF,KAAAY,QAAQ,GAAG,IAAIX,SAAS,CAAC;MACvBO,WAAW,EAAC,IAAIR,WAAW,EAAE;MAC7BU,QAAQ,EAAE,IAAIV,WAAW;KAC1B,CAAC;EAGF;EAEAa,SAASA,CAAA;IACP;IACA,IAAIC,UAAU,GAAG,IAAI,CAACR,SAAS,CAACS,KAAK;IACrC,IAAID,UAAU,CAACJ,QAAQ,IAAII,UAAU,CAACH,UAAU,EAAE;MAChDK,KAAK,CAAC,0CAA0C,CAAC;MACjD,IAAI,CAACJ,QAAQ,CAACK,KAAK,EAAE;KACtB,MACI;MACH,IAAIC,SAAS,GAAG,IAAI,CAACN,QAAQ,CAACG,KAAK;MAEnC;MACA,IAAI,CAACX,EAAE,CAACS,SAAS,CAACC,UAAU,CAAC;MAC7B,IAAI,CAACV,EAAE,CAACe,QAAQ,CAACD,SAAS,CAAC;;IAG7B;IACA,IAAI,CAACN,QAAQ,CAACK,KAAK,EAAE;IACrB,IAAI,CAACX,SAAS,CAACW,KAAK,EAAE;IACtB,IAAI,CAACZ,MAAM,CAACe,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;MAACC,kBAAkB,EAAC;IAAI,CAAC,CAAC;EAC7D;CAED;AAvCYnB,eAAe,GAAAoB,UAAA,EAL3BvB,SAAS,CAAC;EACTwB,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWvB,eAAe,CAuC3B;SAvCYA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}