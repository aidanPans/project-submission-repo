{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass DataService {\n  constructor() {\n    // need an array of clients, meetings, and logins\n    // need two methods per array: one getter and one adder\n    this.logins = [{\n      \"emailid\": \"aidan.potts@icloud.com\",\n      \"password\": \"aidan123\"\n    }, {\n      \"emailid\": \"admin@gmail.com\",\n      \"password\": \"admin123\"\n    }];\n    this.clients = [{}];\n    this.meetings = [{}];\n  } // DI for service class\n  addClient(client_data) {\n    this.clients.push(client_data);\n    // console.log(this.clients);\n  }\n\n  getAllClient() {\n    // TODO\n    return this.clients;\n  }\n  addMeeting(meeting_data) {\n    this.meetings.push(meeting_data);\n  }\n  getAllMeetingInfo() {\n    //TODO\n    return this.meetings;\n  }\n  addLogin(login_data) {\n    this.logins.push(login_data);\n  }\n  getAllLogins() {\n    return this.logins;\n  }\n  checkLoginDetails(login_data) {\n    let user_type = \"\";\n    if (this.logins.includes(login_data)) {\n      if (login_data.emailid == \"admin@gmail.com\" && login_data.password == \"admin123\") {\n        user_type = \"admin\";\n      } else {\n        user_type = \"client\";\n      }\n    } else {\n      user_type = \"DNE\";\n    }\n    return user_type;\n  }\n  static {\n    this.ɵfac = function DataService_Factory(t) {\n      return new (t || DataService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DataService,\n      factory: DataService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { DataService };","map":{"version":3,"names":["DataService","constructor","logins","clients","meetings","addClient","client_data","push","getAllClient","addMeeting","meeting_data","getAllMeetingInfo","addLogin","login_data","getAllLogins","checkLoginDetails","user_type","includes","emailid","password","factory","ɵfac","providedIn"],"sources":["/Users/aidan/Desktop/CalTech Bootcamp/project1_client_meeting_app/src/app/service/data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  // need an array of clients, meetings, and logins\n  // need two methods per array: one getter and one adder\n\n  logins:Array<any> = [\n    {\"emailid\":\"aidan.potts@icloud.com\", \"password\":\"aidan123\"},\n    {\"emailid\":\"admin@gmail.com\", \"password\":\"admin123\"}\n  ];\n\n  clients:Array<any> = [\n    {}\n  ];\n\n  meetings:Array<any> = [\n    {}\n  ];\n\n  constructor() { } // DI for service class\n\n  addClient(client_data:any): void {\n    this.clients.push(client_data);\n    // console.log(this.clients);\n  }\n\n  getAllClient():Array<any> {\n    // TODO\n    return this.clients;\n  }\n\n  addMeeting(meeting_data:any): void {\n    this.meetings.push(meeting_data);\n  }\n\n  getAllMeetingInfo(): Array<any> {\n    //TODO\n    return this.meetings;\n  }\n\n  addLogin(login_data:any): void {\n    this.logins.push(login_data);\n  }\n\n  getAllLogins(): Array<any> {\n    return this.logins;\n  }\n\n  checkLoginDetails(login_data:any): string {\n    \n    let user_type = \"\";\n    if (this.logins.includes(login_data)) {\n      if (login_data.emailid == \"admin@gmail.com\" && login_data.password == \"admin123\") {\n        user_type = \"admin\";\n      }\n      else {\n        user_type = \"client\";\n      }\n    }\n    else {\n      user_type = \"DNE\";\n    }\n    return user_type;\n  }\n\n}\n"],"mappings":";AAEA,MAGaA,WAAW;EAkBtBC,YAAA;IAhBA;IACA;IAEA,KAAAC,MAAM,GAAc,CAClB;MAAC,SAAS,EAAC,wBAAwB;MAAE,UAAU,EAAC;IAAU,CAAC,EAC3D;MAAC,SAAS,EAAC,iBAAiB;MAAE,UAAU,EAAC;IAAU,CAAC,CACrD;IAED,KAAAC,OAAO,GAAc,CACnB,EAAE,CACH;IAED,KAAAC,QAAQ,GAAc,CACpB,EAAE,CACH;EAEe,CAAC,CAAC;EAElBC,SAASA,CAACC,WAAe;IACvB,IAAI,CAACH,OAAO,CAACI,IAAI,CAACD,WAAW,CAAC;IAC9B;EACF;;EAEAE,YAAYA,CAAA;IACV;IACA,OAAO,IAAI,CAACL,OAAO;EACrB;EAEAM,UAAUA,CAACC,YAAgB;IACzB,IAAI,CAACN,QAAQ,CAACG,IAAI,CAACG,YAAY,CAAC;EAClC;EAEAC,iBAAiBA,CAAA;IACf;IACA,OAAO,IAAI,CAACP,QAAQ;EACtB;EAEAQ,QAAQA,CAACC,UAAc;IACrB,IAAI,CAACX,MAAM,CAACK,IAAI,CAACM,UAAU,CAAC;EAC9B;EAEAC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACZ,MAAM;EACpB;EAEAa,iBAAiBA,CAACF,UAAc;IAE9B,IAAIG,SAAS,GAAG,EAAE;IAClB,IAAI,IAAI,CAACd,MAAM,CAACe,QAAQ,CAACJ,UAAU,CAAC,EAAE;MACpC,IAAIA,UAAU,CAACK,OAAO,IAAI,iBAAiB,IAAIL,UAAU,CAACM,QAAQ,IAAI,UAAU,EAAE;QAChFH,SAAS,GAAG,OAAO;OACpB,MACI;QACHA,SAAS,GAAG,QAAQ;;KAEvB,MACI;MACHA,SAAS,GAAG,KAAK;;IAEnB,OAAOA,SAAS;EAClB;;;uBA9DWhB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAoB,OAAA,EAAXpB,WAAW,CAAAqB,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;SAEPtB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}