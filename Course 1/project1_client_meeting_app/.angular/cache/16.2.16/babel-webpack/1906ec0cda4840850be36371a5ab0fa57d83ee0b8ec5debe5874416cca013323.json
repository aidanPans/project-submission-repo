{"ast":null,"code":"import { FormControl, FormGroup } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/data.service\";\nimport * as i2 from \"../login.service\";\nimport * as i3 from \"@angular/forms\";\nclass ClientComponent {\n  constructor(ds, ls) {\n    this.ds = ds;\n    this.ls = ls;\n    this.clientRef = new FormGroup({\n      cli_name: new FormControl(),\n      cli_emailid: new FormControl(),\n      cli_address: new FormControl(),\n      password: new FormControl(),\n      RePassword: new FormControl()\n    });\n    this.loginRef = new FormGroup({\n      cli_emailid: new FormControl(),\n      password: new FormControl()\n    });\n  }\n  addClient() {\n    // creating new client and login variables with data\n    let new_client = this.clientRef.value;\n    if (new_client.password != new_client.RePassword) {\n      alert(\"Passwords do not match, please try again\");\n      this.loginRef.reset();\n    } else {\n      let new_login = this.loginRef.value;\n      // adding the new client and login data using the service adder functions in data.service.ts file\n      this.ds.addClient(new_client);\n      this.ds.addLogin(new_login);\n    }\n    // reset and route user to login page\n    this.loginRef.reset();\n    this.clientRef.reset();\n    this.router.navigate([\"/login\"]);\n  }\n  static {\n    this.ɵfac = function ClientComponent_Factory(t) {\n      return new (t || ClientComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.LoginService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ClientComponent,\n      selectors: [[\"app-client\"]],\n      decls: 28,\n      vars: 1,\n      consts: [[3, \"formGroup\", \"ngSubmit\"], [\"type\", \"name\", \"formControlName\", \"cli_name\", \"id\", \"name\"], [\"type\", \"email\", \"formControlName\", \"cli_emailid\", \"id\", \"email\"], [\"type\", \"address\", \"formControlName-\", \"cli_address\", \"id\", \"address\"], [\"type\", \"password\", \"formControlName\", \"password\", \"id\", \"password\"], [\"type\", \"password\", \"formControlName\", \"RePassword\", \"id\", \"password\"], [\"type\", \"submit\", \"value\", \"Register\", \"id\", \"submitButton\"]],\n      template: function ClientComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\")(1, \"h1\");\n          i0.ɵɵtext(2, \"Create a Client\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"p\");\n          i0.ɵɵtext(4, \"Please fill in this form to create a client.\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(5, \"hr\");\n          i0.ɵɵelementStart(6, \"form\", 0);\n          i0.ɵɵlistener(\"ngSubmit\", function ClientComponent_Template_form_ngSubmit_6_listener() {\n            return ctx.addClient();\n          });\n          i0.ɵɵelementStart(7, \"label\");\n          i0.ɵɵtext(8, \"Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(9, \"input\", 1)(10, \"br\");\n          i0.ɵɵelementStart(11, \"label\");\n          i0.ɵɵtext(12, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"input\", 2)(14, \"br\");\n          i0.ɵɵelementStart(15, \"label\");\n          i0.ɵɵtext(16, \"Address\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(17, \"input\", 3)(18, \"br\");\n          i0.ɵɵelementStart(19, \"label\");\n          i0.ɵɵtext(20, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(21, \"input\", 4)(22, \"br\");\n          i0.ɵɵelementStart(23, \"label\");\n          i0.ɵɵtext(24, \"Re-enter Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(25, \"input\", 5)(26, \"br\")(27, \"input\", 6);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"formGroup\", ctx.clientRef);\n        }\n      },\n      dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}\nexport { ClientComponent };","map":{"version":3,"names":["FormControl","FormGroup","ClientComponent","constructor","ds","ls","clientRef","cli_name","cli_emailid","cli_address","password","RePassword","loginRef","addClient","new_client","value","alert","reset","new_login","addLogin","router","navigate","i0","ɵɵdirectiveInject","i1","DataService","i2","LoginService","selectors","decls","vars","consts","template","ClientComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","ClientComponent_Template_form_ngSubmit_6_listener","ɵɵadvance","ɵɵproperty"],"sources":["/Users/aidan/Desktop/CalTech Bootcamp/project1_client_meeting_app/src/app/client/client.component.ts","/Users/aidan/Desktop/CalTech Bootcamp/project1_client_meeting_app/src/app/client/client.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { DataService } from '../service/data.service';\nimport { LoginService } from '../login.service';\n\n@Component({\n  selector: 'app-client',\n  templateUrl: './client.component.html',\n  styleUrls: ['./client.component.css']\n})\nexport class ClientComponent {\n\n  clientRef = new FormGroup({\n    cli_name:new FormControl(),\n    cli_emailid:new FormControl(),\n    cli_address:new FormControl(),\n    password:new FormControl(),\n    RePassword:new FormControl()\n  });\n\n  loginRef = new FormGroup({\n    cli_emailid:new FormControl(),\n    password: new FormControl()\n  });\n\n  constructor(public ds:DataService, public ls:LoginService) { // DI for Login Service\n  }\n\n  addClient(): void {\n    // creating new client and login variables with data\n    let new_client = this.clientRef.value;\n    if (new_client.password != new_client.RePassword) {\n      alert(\"Passwords do not match, please try again\");\n      this.loginRef.reset();\n    }\n    else {\n      let new_login = this.loginRef.value;\n\n      // adding the new client and login data using the service adder functions in data.service.ts file\n      this.ds.addClient(new_client);    \n      this.ds.addLogin(new_login);\n    }\n\n    // reset and route user to login page\n    this.loginRef.reset();\n    this.clientRef.reset();\n    this.router.navigate([\"/login\"])\n  }\n\n}\n","<div>\n    <h1>Create a Client</h1>\n    <p>Please fill in this form to create a client.</p>\n    <hr>\n    <form [formGroup]=\"clientRef\" (ngSubmit)=\"addClient()\">\n        <label>Name</label>\n            <input type=\"name\" formControlName=\"cli_name\" id=\"name\"/><br/>\n        <label>Email</label>\n            <input type=\"email\" formControlName=\"cli_emailid\" id=\"email\"/><br/>\n        <label>Address</label>\n            <input type=\"address\" formControlName-=\"cli_address\" id=\"address\"/><br/>\n        <label>Password</label>\n            <input type=\"password\" formControlName=\"password\" id=\"password\"/><br/>\n        <label>Re-enter Password</label>\n            <input type=\"password\" formControlName=\"RePassword\" id=\"password\"/><br/>\n        <input type=\"submit\" value=\"Register\" id=\"submitButton\"/> \n    </form>\n</div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}